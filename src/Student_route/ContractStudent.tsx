import React, { useState, useEffect } from "react";
import "./ContractStudent.css";

// ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu h·ª£p ƒë·ªìng
interface Contract {
  contractId: string;
  userId: string;
  roomId: string;
  startDate: string;
  endDate: string;
  price: number;
  depositStatus: string;
  contractStatus: string;
  note: string;
  createdAt: string;
  updatedAt: string;
}

let initialContracts: Contract[] = [];

const ContractManagement: React.FC = () => {
  const [contracts, setContracts] = useState<Contract[]>(initialContracts);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [currentContract, setCurrentContract] = useState<Contract | null>(null);
  const [isCreating, setIsCreating] = useState<boolean>(false);

  useEffect(() => {
    const fetchContracts = async () => {
      try {
        const token = localStorage.getItem("token"); // üîê L·∫•y token t·ª´ localStorage
        const userId = localStorage.getItem("userId"); // üîê L·∫•y userId t·ª´ localStorage
        if (!token || !userId) {
          console.error("Token ho·∫∑c userId kh√¥ng t·ªìn t·∫°i trong localStorage.");
          return;
        }
        const response = await fetch(
          `http://localhost:8080/api/v1/contracts/user/${userId}`, // Thay userId b·∫±ng ID th·ª±c t·∫ø
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        // üîπ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API
        const initialContracts = data.map((item: any) => ({
          contractId: item.contractId,
          userId: item.userId,
          roomId: item.roomId,
          employeeName: "N/A", // API kh√¥ng c√≥ d·ªØ li·ªáu n√†y
          contractType: "H·ª£p ƒë·ªìng thu√™",
          startDate: item.startDate
            ? new Date(item.startDate).toISOString()
            : null,
          endDate: item.endDate ? new Date(item.endDate).toISOString() : null,
          price: item.price || 0,
          depositStatus: item.depositStatus || "PENDING",
          contractStatus: item.contractStatus || "Unknown",
          note: item.note || "",
          createdAt: item.createdAt
            ? new Date(item.createdAt).toISOString()
            : null,
          updatedAt: item.updatedAt
            ? new Date(item.updatedAt).toISOString()
            : null,
        }));

        setContracts(initialContracts); // ‚úÖ C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu API
      } catch (error) {
        console.error("L·ªói khi g·ªçi API:", error);
      }
    };

    fetchContracts();
  }, []);

  // State cho form ch·ªânh s·ª≠a v√† t·∫°o m·ªõi
  const [formData, setFormData] = useState<Contract>({
    contractId: "",
    userId: "",
    roomId: "",
    startDate: "",
    endDate: "",
    price: 0,
    depositStatus: "",
    contractStatus: "",
    note: "",
    createdAt: "",
    updatedAt: "",
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  const getDepositStatusLabel = (status: string) => {
    switch (status) {
      case "COMPLETED":
        return "Ho√†n t·∫•t";
      case "INSUFFICIENT":
        return "C√≤n thi·∫øu";
      case "UNPAID":
        return "Ch∆∞a thanh to√°n";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const getContractStatusLabel = (status: string) => {
    switch (status) {
      case "Active":
        return "ƒêang hi·ªáu l·ª±c";
      case "Inactive":
        return "H·∫øt hi·ªáu l·ª±c";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  return (
    <div className="contract-management">
      <h2>Qu·∫£n l√Ω h·ª£p ƒë·ªìng</h2>
      <div className="filters">
        <select defaultValue="10">
          <option value="10">Hi·ªÉn th·ªã 10</option>
          <option value="20">Hi·ªÉn th·ªã 20</option>
          <option value="50">Hi·ªÉn th·ªã 50</option>
        </select>
        <select>
          <option>Ch·ªçn tr·∫°ng th√°i</option>
          <option>ƒê√£ thu√™</option>
          <option>Ch∆∞a thu√™</option>
        </select>
        <input type="text" placeholder="T√¨m ki·∫øm..." />
      </div>

      {/* B·∫£ng danh s√°ch h·ª£p ƒë·ªìng */}
      <table>
        <thead>
          <tr>
            <th>STT</th>
            <th>M√£ Hƒê</th>
            <th>M√£ KH</th>
            <th>M√£ ph√≤ng</th>
            <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
            <th>Ng√†y k·∫øt th√∫c</th>
            <th>Gi√° thu√™</th>
            <th>Thanh to√°n</th>
            <th>Tr·∫°ng th√°i</th>
            <th>C·∫≠p nh·∫≠t</th>
            <th>Ghi ch√∫</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {contracts.map((contract, index) => (
            <tr key={contract.contractId}>
              <td>{index + 1}</td>
              <td>{contract.contractId}</td>
              <td>{contract.userId}</td>
              <td>{contract.roomId}</td>
              <td>{formatDate(contract.startDate)}</td>
              <td>{formatDate(contract.endDate)}</td>
              <td>{contract.price?.toLocaleString()} VNƒê</td>
              <td>{getDepositStatusLabel(contract.depositStatus)}</td>
              <td>{getContractStatusLabel(contract.contractStatus)}</td>
              <td>{contract.note}</td>
              <td>{formatDate(contract.updatedAt)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ContractManagement;