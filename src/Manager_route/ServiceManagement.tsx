import React, { useEffect, useState } from "react";
import { Table, Input, Button, Modal, Form, message } from "antd";
import { EditOutlined, PlusOutlined, DeleteOutlined } from "@ant-design/icons";
import { Select } from "antd";
import "./ServiceManagement.css";

interface Service {
  key: string;
  serviceName: string;
  description: string;
  pricePerUnit: string;
  calculationUnit: string;
  status: string;
}

const getAuthToken = () => localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage

const ServiceManagement: React.FC = () => {
  const [services, setServices] = useState<Service[]>([]);
  const [modalVisible, setModalVisible] = useState<boolean>(false);
  const [editingService, setEditingService] = useState<Service | null>(null);
  const [form] = Form.useForm();

  // üõ† Fetch danh s√°ch d·ªãch v·ª• t·ª´ API khi component mount (C√ì AUTHORIZE)
  useEffect(() => {
    const fetchServices = async () => {
      try {
        const response = await fetch("http://localhost:8080/api/v1/utility-services/list", {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${getAuthToken()}`, // Th√™m token v√†o header
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) throw new Error("L·∫•y danh s√°ch d·ªãch v·ª• th·∫•t b·∫°i!");

        const data = await response.json();
        setServices(data.map((item: any) => ({ key: item.utilityServiceId, ...item })));
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error);
      }
    };

    fetchServices();
  }, []);

  const handleAdd = () => {
    setEditingService(null);
    setModalVisible(true);
    form.resetFields();
  };

  const handleEdit = (record: Service) => {
    setEditingService(record);
    setModalVisible(true);
    form.setFieldsValue(record);
  };

  // üóë X√≥a d·ªãch v·ª• c√≥ AUTHORIZATION
  const handleDelete = async (key: string) => {
    try {
      const response = await fetch(`http://localhost:8080/api/v1/utility-services/delete/${key}`, {
        method: "DELETE",
        headers: {
          "Authorization": `Bearer ${getAuthToken()}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) throw new Error("X√≥a d·ªãch v·ª• th·∫•t b·∫°i!");

      setServices((prev) => prev.filter((service) => service.key !== key));
      message.success("X√≥a d·ªãch v·ª• th√†nh c√¥ng!");
    } catch (error) {
      message.error("L·ªói khi x√≥a d·ªãch v·ª•!");
      console.error(error);
    }
  };

  // üìå Th√™m / C·∫≠p nh·∫≠t d·ªãch v·ª• c√≥ AUTHORIZATION
 const handleSave = async (values: Omit<Service, "key">) => {
  try {
    const url = editingService
      ? `http://localhost:8080/api/v1/utility-services/update/${editingService.key}`
      : "http://localhost:8080/api/v1/utility-services/add";

    const method = editingService ? "PUT" : "POST";

    const response = await fetch(url, {
      method: method,
      headers: {
        "Authorization": `Bearer ${getAuthToken()}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(values),
    });

    const data = await response.json(); // Nh·∫≠n ph·∫£n h·ªìi t·ª´ API
    console.log("API Response:", data); // Debug ph·∫£n h·ªìi

    if (!response.ok) {
      throw new Error(data.message || "Th√™m/C·∫≠p nh·∫≠t d·ªãch v·ª• th·∫•t b·∫°i!");
    }

    if (!editingService) {
      const newService: Service = { key: data.result.utilityServiceId, ...data.result };
      setServices((prev) => [...prev, newService]);
    } else {
      setServices((prev) =>
        prev.map((service) =>
          service.key === editingService.key ? { ...service, ...values } : service
        )
      );
    }

    message.success(editingService ? "C·∫≠p nh·∫≠t th√†nh c√¥ng!" : "Th√™m th√†nh c√¥ng!");
    setModalVisible(false);
    setEditingService(null);
    form.resetFields();
  } catch (error) {
  const errorMessage = error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh!";
  console.error("L·ªói khi l∆∞u d·ªãch v·ª•:", errorMessage);
  message.error(errorMessage);
}
};


  return (
    <div className="service-container">
      <h2>Qu·∫£n l√Ω d·ªãch v·ª•</h2>
  
  <Button 
    type="primary" 
    icon={<PlusOutlined />} 
    onClick={handleAdd}
    className="add-button"
  >
    Th√™m d·ªãch v·ª•
  </Button>
      <Table
        dataSource={services}
        className="service-table"

        columns={[
          { title: "T√™n d·ªãch v·ª•", dataIndex: "serviceName", key: "serviceName" },
          { title: "M√¥ t·∫£", dataIndex: "description", key: "description" },
          { title: "Gi√° m·ªói ƒë∆°n v·ªã", dataIndex: "pricePerUnit", key: "pricePerUnit" },
          { title: "ƒê∆°n v·ªã t√≠nh", dataIndex: "calculationUnit", key: "calculationUnit" },
          { title: "Tr·∫°ng th√°i", dataIndex: "status", key: "status" },
          {
            title: "H√†nh ƒë·ªông",
            key: "action",
            render: (_: unknown, record: Service) => (
              <>
                <Button icon={<EditOutlined />} onClick={() => handleEdit(record)} className="edit-button" />
                <Button icon={<DeleteOutlined />} onClick={() => handleDelete(record.key)} className="delete-button" />
              </>
            ),
          },
        ]}
      />
      <Modal
        title={editingService ? "Ch·ªânh s·ª≠a d·ªãch v·ª•" : "Th√™m d·ªãch v·ª•"}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
      >
        <Form form={form} onFinish={handleSave} layout="vertical">
          <Form.Item name="serviceName" label="T√™n d·ªãch v·ª•" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•" }]}>
            <Input />
          </Form.Item>
          <Form.Item name="description" label="M√¥ t·∫£" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£" }]}>
            <Input />
          </Form.Item>
          <Form.Item name="pricePerUnit" label="Gi√° m·ªói ƒë∆°n v·ªã" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p gi√°" }]}>
            <Input type="number" />
          </Form.Item>
          <Form.Item name="calculationUnit" label="ƒê∆°n v·ªã t√≠nh" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë∆°n v·ªã" }]}>
            <Input />
          </Form.Item>
          <Form.Item
            name="status"
            label="Tr·∫°ng th√°i"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn tr·∫°ng th√°i" }]}
            initialValue="Active" // M·∫∑c ƒë·ªãnh l√† "Active"
          >
            <Select>
              <Select.Option value="Active">Active</Select.Option>
              <Select.Option value="Inactive">Disable</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">L∆∞u</Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default ServiceManagement;
