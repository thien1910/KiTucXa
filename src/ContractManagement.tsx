import React, { useState, useEffect } from "react";
import "./ContractManagement.css";

// ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu h·ª£p ƒë·ªìng
interface Contract {
  contractId: string;
  userId: string;
  roomId: string;
  startDate: string;
  endDate: string;
  price: number;
  depositStatus: string;
  contractStatus: string;
  note: string;
  createdAt: string;
  updatedAt: string;
}

let initialContracts: Contract[] = [];

const ContractManagement: React.FC = () => {
  const [contracts, setContracts] = useState<Contract[]>(initialContracts);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [currentContract, setCurrentContract] = useState<Contract | null>(null);
  const [isCreating, setIsCreating] = useState<boolean>(false);

  useEffect(() => {
    const fetchContracts = async () => {
      try {
        const token = localStorage.getItem("token"); // üîê L·∫•y token t·ª´ localStorage
        const response = await fetch(
          "http://localhost:8080/api/v1/contracts/list",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        // üîπ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API
        const initialContracts = data.map((item: any) => ({
          contractId: item.contractId,
          userId: item.userId,
          roomId: item.roomId,
          employeeName: "N/A", // API kh√¥ng c√≥ d·ªØ li·ªáu n√†y
          contractType: "H·ª£p ƒë·ªìng thu√™",
          startDate: item.startDate
            ? new Date(item.startDate).toISOString()
            : null,
          endDate: item.endDate ? new Date(item.endDate).toISOString() : null,
          price: item.price || 0,
          depositStatus: item.depositStatus || "PENDING",
          contractStatus: item.contractStatus || "Unknown",
          note: item.note || "",
          createdAt: item.createdAt
            ? new Date(item.createdAt).toISOString()
            : null,
          updatedAt: item.updatedAt
            ? new Date(item.updatedAt).toISOString()
            : null,
        }));

        setContracts(initialContracts); // ‚úÖ C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu API
      } catch (error) {
        console.error("L·ªói khi g·ªçi API:", error);
      }
    };

    fetchContracts();
  }, []);

  // State cho form ch·ªânh s·ª≠a v√† t·∫°o m·ªõi
  const [formData, setFormData] = useState<Contract>({
    contractId: "",
    userId: "",
    roomId: "",
    startDate: "",
    endDate: "",
    price: 0,
    depositStatus: "",
    contractStatus: "",
    note: "",
    createdAt: "",
    updatedAt: "",
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  const getDepositStatusLabel = (status: string) => {
    switch (status) {
      case "COMPLETED":
        return "Ho√†n t·∫•t";
      case "INSUFFICIENT":
        return "C√≤n thi·∫øu";
      case "UNPAID":
        return "Ch∆∞a thanh to√°n";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const getContractStatusLabel = (status: string) => {
    switch (status) {
      case "Active":
        return "ƒêang hi·ªáu l·ª±c";
      case "Inactive":
        return "H·∫øt hi·ªáu l·ª±c";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // H√†m x√≥a h·ª£p ƒë·ªìng
  const handleDelete = async (id: string) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ª£p ƒë·ªìng n√†y? ‚ùó")) {
      return;
    }

    const token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage

    try {
      const response = await fetch(
        `http://localhost:8080/api/v1/contracts/delete/${id}`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`, // G·ª≠i token trong header
          },
        }
      );

      if (!response.ok) {
        throw new Error(`X√≥a h·ª£p ƒë·ªìng th·∫•t b·∫°i! (M√£ l·ªói: ${response.status})`);
      }

      // X√≥a th√†nh c√¥ng, c·∫≠p nh·∫≠t danh s√°ch trong state
      const updatedContracts = contracts.filter(
        (contract) => contract.contractId !== id
      );
      setContracts(updatedContracts);

      alert("‚úÖ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi x√≥a h·ª£p ƒë·ªìng:", error);
      alert(`‚ùå X√≥a h·ª£p ƒë·ªìng th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i sau.`);
    }
  };

  // H√†m m·ªü form ch·ªânh s·ª≠a
  const handleEdit = (contract: Contract) => {
    setCurrentContract(contract);
    setFormData(contract);
    setIsEditing(true);
    setIsCreating(false);
  };

  // H√†m m·ªü form t·∫°o m·ªõi
  const handleCreate = () => {
    setFormData({
      contractId: "",
      userId: "",
      roomId: "",
      startDate: "",
      endDate: "",
      price: 0,
      depositStatus: "",
      contractStatus: "",
      note: "",
      createdAt: "",
      updatedAt: "",
    });
    setIsCreating(true);
    setIsEditing(false);
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu trong form
  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // H√†m g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng
  const updateContractApi = async (contract: Contract) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá!");
        return false;
      }

      const response = await fetch(
        `http://localhost:8080/api/v1/contracts/update/${contract.contractId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(contract),
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(`L·ªói: ${result.message || response.statusText}`);
      }

      return true;
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng:", error);
      return false;
    }
  };

  // H√†m g·ªçi API ƒë·ªÉ th√™m h·ª£p ƒë·ªìng m·ªõi
  const createContractApi = async (contractData: Contract) => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        "http://localhost:8080/api/v1/contracts/add",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`, // ƒê√≠nh k√®m token
          },
          body: JSON.stringify(contractData),
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(`L·ªói: ${result.message || response.statusText}`);
        console.error("L·ªói khi t·∫°o h·ª£p ƒë·ªìng:");
      }

      return true;
    } catch (error) {
      console.error("L·ªói khi th√™m h·ª£p ƒë·ªìng:", error);
      return false;
    }
  };

  // H√†m l∆∞u ch·ªânh s·ª≠a
  const handleSave = async () => {
    if (isEditing && currentContract) {
      const updatedContracts = contracts.map((contract) =>
        contract.contractId === currentContract.contractId ? formData : contract
      );
      const isUpdated = await updateContractApi(formData);
      if (!isUpdated) {
        alert("‚ùå C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i sau.");
        return;
      }
      alert("‚úÖ C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng th√†nh c√¥ng!");
      setContracts(updatedContracts);
      setIsEditing(false);
      setCurrentContract(null);
    } else if (isCreating) {
      const newContract = await createContractApi(formData);
      if (!newContract) {
        alert("‚ùå T·∫°o h·ª£p ƒë·ªìng m·ªõi th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i sau.");
        return;
      }
      alert("‚úÖ T·∫°o h·ª£p ƒë·ªìng m·ªõi th√†nh c√¥ng!");
      setContracts([...contracts, formData]);
      setIsCreating(false);
    }
  };

  // H√†m ƒë√≥ng form
  const handleCancel = () => {
    setIsEditing(false);
    setIsCreating(false);
    setCurrentContract(null);
  };

  return (
    <div className="contract-management">
      <h2>Qu·∫£n l√Ω h·ª£p ƒë·ªìng</h2>
      <div className="filters">
        <select defaultValue="10">
          <option value="10">Hi·ªÉn th·ªã 10</option>
          <option value="20">Hi·ªÉn th·ªã 20</option>
          <option value="50">Hi·ªÉn th·ªã 50</option>
        </select>
        <select>
          <option>Ch·ªçn tr·∫°ng th√°i</option>
          <option>ƒê√£ thu√™</option>
          <option>Ch∆∞a thu√™</option>
        </select>
        <input type="text" placeholder="T√¨m ki·∫øm..." />
      </div>

      <button className="create-btn" onClick={handleCreate}>
        T·∫°o h·ª£p ƒë·ªìng m·ªõi
      </button>

      {/* B·∫£ng danh s√°ch h·ª£p ƒë·ªìng */}
      <table>
        <thead>
          <tr>
            <th>STT</th>
            <th>M√£ Hƒê</th>
            <th>M√£ KH</th>
            <th>M√£ ph√≤ng</th>
            <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
            <th>Ng√†y k·∫øt th√∫c</th>
            <th>Gi√° thu√™</th>
            <th>Thanh to√°n</th>
            <th>Tr·∫°ng th√°i</th>
            <th>C·∫≠p nh·∫≠t</th>
            <th>Ghi ch√∫</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {contracts.map((contract, index) => (
            <tr key={contract.contractId}>
              <td>{index + 1}</td>
              <td>{contract.contractId}</td>
              <td>{contract.userId}</td>
              <td>{contract.roomId}</td>
              <td>{formatDate(contract.startDate)}</td>
              <td>{formatDate(contract.endDate)}</td>
              <td>{contract.price?.toLocaleString()} VNƒê</td>
              <td>{getDepositStatusLabel(contract.depositStatus)}</td>
              <td>{getContractStatusLabel(contract.contractStatus)}</td>
              <td>{contract.note}</td>
              <td>{formatDate(contract.updatedAt)}</td>
              <td>
                <button
                  className="edit-btn"
                  onClick={() => handleEdit(contract)}
                >
                  S·ª≠a
                </button>
                <button
                  className="delete-btn"
                  onClick={() => handleDelete(contract.contractId)}
                >
                  X√≥a
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Form ch·ªânh s·ª≠a ho·∫∑c t·∫°o m·ªõi */}
      {(isEditing || isCreating) && (
        <div className="edit-form">
          <h3>{isEditing ? "Ch·ªânh s·ª≠a h·ª£p ƒë·ªìng" : "T·∫°o h·ª£p ƒë·ªìng m·ªõi"}</h3>

          {!isCreating && (
            <div className="form-group">
              <label>M√£ h·ª£p ƒë·ªìng:</label>
              <input
                type="text"
                name="contractId"
                value={formData.contractId}
                onChange={handleInputChange}
                disabled={isEditing} // Kh√¥ng cho ph√©p s·ª≠a m√£ h·ª£p ƒë·ªìng khi ch·ªânh s·ª≠a
              />
            </div>
          )}

          <div className="form-group">
            <label>M√£ kh√°ch h√†ng:</label>
            <input
              type="text"
              name="userId"
              value={formData.userId}
              disabled={isEditing}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label>M√£ ph√≤ng:</label>
            <input
              type="text"
              name="roomId"
              value={formData.roomId}
              disabled={isEditing}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label>Ng√†y b·∫Øt ƒë·∫ßu:</label>
            <input
              type="date"
              name="startDate"
              value={formData.startDate}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label>Ng√†y k·∫øt th√∫c:</label>
            <input
              type="date"
              name="endDate"
              value={formData.endDate}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label>Gi√° thu√™:</label>
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label>Tr·∫°ng th√°i thanh to√°n:</label>
            <select
              name="depositStatus"
              value={formData.depositStatus}
              onChange={handleInputChange}
            >
              <option value="COMPLETED">Ho√†n t·∫•t</option>
              <option value="INSUFFICIENT">C√≤n thi·∫øu</option>
              <option value="UNPAID">Ch∆∞a thanh to√°n</option>
            </select>
          </div>

          <div className="form-group">
            <label>Tr·∫°ng th√°i h·ª£p ƒë·ªìng:</label>
            <select
              name="contractStatus"
              value={formData.contractStatus}
              onChange={handleInputChange}
            >
              <option value="Active">ƒêang hi·ªáu l·ª±c</option>
              <option value="Inactive">H·∫øt hi·ªáu l·ª±c</option>
            </select>
          </div>

          <div className="form-group">
            <label>Ghi ch√∫:</label>
            <textarea
              name="note"
              value={formData.note || ""}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-actions">
            <button onClick={handleSave}>L∆∞u</button>
            <button onClick={handleCancel}>H·ªßy</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ContractManagement;
